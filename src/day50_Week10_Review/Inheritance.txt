INHERITANCE
•	Is a relationship
•	To build IS A relation between classes (parent and child, super and sub, base and derived)
•	Easiest way to get rich ===> extends
•	Child class (sub class): can inherit all the variables & methods (visible) from the parent class
•	Parent class (super class): cannot inherit anything from child class. Contains all the common features that are meant to be inherited.
•	The sub class can add its own fields and methods.
•	public class Dog extends Animal { }: Dog is sub class, Animal is parent class
•	PRIVATE variables and methods ARE NOT inherited.
•	CONSTRUCTORS are not inherited, but child class must call one of the parent class’s constructor.
•	FINAL CLASS cannot be inherited. (Parent class cannot be final)
•   One class only extends one class [JAVA does not support Multiple Inheritance]
•	One class can be extended by multiple classes.

•	this keyword: refers to the instances. [Current class]
this.    : calls instance variables & instance methods
this() : calls the constructor of current class

•	super keyword: refers to the instances. [Parent class]
super.   : calls instance variables & instance methods of super class
super() : calls the constructor of parent class

•	Constructor calls in inheritance:
		1. Child class MUST call parent class' constructor
		2. Parent class' default constructor is always called implicitly in child class.
		3. Parent class' constructor with argument need to be called explicitly.


•	Method Overriding: giving different implementations to the method
	MUST happen in the child class
	return-type, method name, parameter MUST be same
	Access modifier need to be same or more visible
(public > protected > default)
	Method we cannot override: private, static, final
	ONLY the instance methods (not final & not private) can be overridden
	@Overridden annotation must be applicable

•	No Inheritance: No Abstraction and No Polymorphism
