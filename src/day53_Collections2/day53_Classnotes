---SET
---QUE


Collection            dynamic size
                      ready methods
                      non primitives only


          LIST(I)   : Has Index, duplicates are allowed
                    Arraylist (C) :  search/accessing element is faster
                    LinkedList(C):  insertion/deletion of an element is faster
                    Vector (C) : is Syncronised ==> thread safe
                        Stack (C): LIFO
                                 pop(), push()

         SET (I)    :  Doesnot have an index; does not allow duplicates

                    HashSet (C): order random, null
                    Linked HashSet: insretion order preserved,null
                    TreeSet : does not accept null
                              is sorted (Ascending,Artan, Kucukten Buyuge)

         QUEUE(I)  : Does not have an index
                     Duplicates are allowed
                     poll() ==>
                     FIFO(First in First Out)

                 PriorityQueue(C): Maintains random Order
                 ArrysDequeue (C): maintains insertion order
                 LinkedList(C)   : Maintains insertion order